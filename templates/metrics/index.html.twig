{% extends 'base.html.twig' %} {% block title %}Metrics{% endblock %} {% block
body %}

<div class="example-wrapper">
    <h1>Metrics</h1>

    <h2>Introduktion</h2>
    <p>
        Clean Code √§r en upps√§ttning principer och praxis som hj√§lper utvecklare
        att skriva kod som √§r l√§tt att l√§sa, underh√•lla och f√∂rb√§ttra. Det √§r
        ingen h√•rd regel, utan mer av en filosofi med riktlinjer f√∂r att skriva
        kod som √§r s√• enkel och tydlig som m√∂jligt. üíÅüèª‚Äç‚ôÄÔ∏è
    </p>
    <p>
        F√∂r att uppn√• denna kodkvalit√© finns det s√• kallde ‚Äúclean
        code‚Äù-principer, de sex C:na:
    </p>

    <h3>Codestyle</h3>
    <p>
        Codestyle syftar p√• formateringen, som anv√§ndning av indentering,
        placering av parenteser, anv√§ndning av blanksteg och hur variabler och
        funktioner namnges.
    </p>

    <p>
        Att h√•lla en konsekvent kodstil g√∂r koden l√§ttare att l√§sa och
        underh√•lla och d√§rav minskar risken f√∂r fel. Ett bra s√§tt att f√∂lja
        denna princip √§r att f√∂lja kodningsstandard f√∂r de spr√•k (t.ex. PEP 8
        f√∂r Python, ESLint f√∂r JavaScript) man anv√§nder.
    </p>

    <p>
        <strong>Exempel ur koden:</strong> I denna kurs anv√§nder vi en sorts
        lint f√∂r PHP som hj√§lper oss √•stadkomma detta.
    </p>

    <h3>Coverage</h3>
    <p>
        Coverage handlar om att ha bra ‚Äútest coverage‚Äù. Dvs, detta m√§ter hur
        stor del av ens kod som t√§cks av ens egna automatiserade tester. Den ger
        ett m√•tt p√• hur v√§l testad ens kod √§r och hur mycket av den potentiella
        risken f√∂r buggar och fel som t√§cks av ens egna tester.
    </p>

    <p>
        <strong>Exempel ur koden:</strong> I min kod hade till exempel
        ApiController 0 testfall och d√§rmed 0 % coverage. Detta kan l√§tt
        √•tg√§rdas genom att implementera fler testfall f√∂r denna klass.
    </p>

    <h3>Complexity</h3>
    <p>
        Complexity st√•r f√∂r hur komplicerad och sv√•r det √§r att f√∂rst√• ens kod.
        T ex, f√∂r m√•nga if-satser och nestlade loopar ger en ‚Äúh√∂g komplexitet‚Äù.
        Desto h√∂gre komplexitet ju sv√•rare √§r koden att underh√•lla och debugga.
        D√§rf√∂r vill man h√•lla komplexiteten s√• l√•g som m√∂jlig och med hj√§lp av
        clean code-principer vill man helst modualisera. Dvs, bryta ner stora
        och komplexa funktioner till mindre, mer hanterbara bitar.
    </p>

    <p>
        <strong>Exempel ur koden:</strong> I min kod har ApiController en h√∂g
        komplexitet d√§rf√∂r att den inneh√•ller m√•nga metoder med olika ansvars
        omr√•den, och externa beroenden. Den inneh√•ller √§ven m√•nga route-attribut
        vilket indikerar en ny endpoint, och m√•nga endpoints inneb√§r mer kod att
        underh√•lla och testa. En l√∂sning skulle vara att dela upp och
        modualisera f√∂r att minska specifika metoders ansvar. T ex, skapa
        separata klasser f√∂r olika ansvar: DeckApiController, GameApiController
        och BookApiController.
    </p>

    <h3>Cohesion</h3>
    <p>
        Cohesion √§r ett m√•tt f√∂r kodens sammanh√•llning. Detta m√§ter hur v√§l
        olika delar av en kodmodul eller klass h√§nger ihop. En ‚Äúh√∂g cohesion‚Äù
        inneb√§r att alla delar av en modul eller klass √§r starkt relaterade och
        bidrar till samma funktionalitet, medan en ‚Äúl√•g cohesion‚Äù tyder p√• att
        modulen eller klassen har m√•nga olika, orelaterade funktioner.
    </p>

    <p>
        <strong>Exempel ur koden:</strong> ProductRepository samt
        Game21Controller har ett relativt h√∂gt LCOM-nummer (Lack of Cohesion of
        Methods), vilket indikerar att klasserna har l√•g sammanh√•llning. Detta
        beror p√• att b√•da klasserna inneh√•ller flera metoder som √§r orelaterade
        och inte delar mycket gemensam data.
    </p>

    <h3>Coupling</h3>
    <p>
        Coupling refererar till graden av beroende mellan olika moduler, klasser
        eller komponenter i en kodbas. En h√∂g koppling inneb√§r att √§ndringar i
        en del av koden kan ha en stor p√•verkan p√• andra delar (likt en
        dominoeffekt), medan l√•g koppling inneb√§r att moduler eller klasser √§r
        mer oberoende av varandra.
    </p>

    <p>
        <strong>Exempel ur koden:</strong> AbstractCardController √§r en s√•dan
        klass som p√•verkar tre andra klasser och p√•verkas sj√§lv av fyra andra
        klasser. Detta ger en instabilitetsfaktor p√• 0,57 av 1, vilket indikerar
        m√•ttlig instabilitet.
    </p>

    <h3>CRAP (Change Risk Analysis and Predictions)</h3>
    <p>
        CRAP kan man s√§ga √§r ett kompletterande verktyg till Coupling. Det √§r en
        metod f√∂r att m√§ta och bed√∂ma riskerna och konsekvenserna av att g√∂ra
        √§ndringar i koden. Den g√∂r detta genom att analysera komplexitet,
        ansvar, abstraktion och polymorfism i koden och hj√§lper utvecklare
        identifiera potentiella problemomr√•den. Detta hj√§lper att f√∂rb√§ttra
        kodens kvalitet och underh√•ll √∂ver tid.
    </p>

    <h2>Phpmetrics</h2>
    <p>
        Jag har analyserat min kod med Phpmetrics och identifierat flera omr√•den
        med f√∂rb√§ttringspotential. H√§r √§r en sammanfattning av resultaten:
    </p>
    <ol>
        <li>
            <strong>Violations</strong>

            <p>Totalt 8 violations, varav 2 √§r errors.</p>
            <p>Av dessa √§r 4 klassrelaterade och 4 paketrelaterade.</p>
            <p>
                <strong>F√∂rslag p√• f√∂rb√§ttring</strong>: Genomg√• dessa
                violations och √•tg√§rda specifika fel och varningar, s√§rskilt de
                som √§r markerade som errors, f√∂r att f√∂rb√§ttra kodkvaliteten.
            </p>
        </li>
        <li>
            <strong>Cyclomatic Complexity</strong>
            <p>
                Det finns n√•gra stora r√∂da cirklar som indikerar h√∂g cyclomatic
                complexity, d√§r den st√∂rsta har ett v√§rde av 14.
            </p>
            <p>
                <strong>F√∂rslag p√• f√∂rb√§ttring</strong>: Identifiera metoder med
                h√∂g cyclomatic complexity och refaktorera dem f√∂r att minska
                komplexiteten. Detta kan inneb√§ra att bryta ner komplexa metoder
                i mindre, mer hanterbara delar.
            </p>
        </li>
        <li>
            <strong>Test Coverage</strong>

            <p>Det finns 19 klasser som inte omfattas av tester.</p>
            <p>
                <strong>F√∂rslag p√• f√∂rb√§ttring</strong>: √ñka testt√§ckningen
                genom att skriva enhetstester f√∂r de klasser som saknar test.
                Detta kommer att f√∂rb√§ttra koden p√•litlighet och underl√§ttar
                framtida underh√•ll.
            </p>
        </li>
    </ol>

    <h2>F√∂rb√§ttringar</h2>
    <p>F√∂ljande tre f√∂rb√§ttringar ska jag genomf√∂ra:</p>
    <ol>
        <li>
            <strong>Minska komplexiteten i App\Card\Card</strong>
            <p>
                <strong>Vad jag t√§nker g√∂ra:</strong> Jag ska sl√§cka ett
                violation-error (too complex method code) genom att ers√§tta en
                switch-sats med ett direkt uppslag i en array.
            </p>
            <p>
                <strong>Varf√∂r jag v√§ljer detta:</strong> Detta kommer att s√§nka
                komplexiteten i metoden genom att ers√§tta m√•nga ‚Äúcase‚Äù-satser
                med en enkel array-uppslagning, vilket g√∂r koden mer l√§ttl√§st
                och underh√•llsbar.
            </p>
            <p>
                <strong>F√∂rv√§ntad p√•verkan:</strong> Jag f√∂rv√§ntar mig att detta
                kommer att minska cyclomatic complexity och f√∂rb√§ttra kodens
                l√§sbarhet. F√∂re f√∂rb√§ttringen hade jag 8 violations, varav 2
                errors. Efter f√∂rb√§ttringen minskade antalet violations till 7,
                varav 1 error.
            </p>
        </li>
        <li>
            <strong>Ta bort oanv√§nd kod (ProductController)</strong>
            <p>
                <strong>Vad jag t√§nker g√∂ra:</strong> Jag kommer att ta bort
                <strong><code>ProductController</code></strong> klassen eftersom
                den bara anv√§nds i en tidigare √∂vning och inte l√§ngre beh√∂vs.
            </p>
            <p>
                <strong>Varf√∂r jag v√§ljer detta:</strong> Att ta bort oanv√§nd
                kod minskar den tekniska skulden och √∂kar kodbasens √∂vergripande
                underh√•llbarhet. √Ñven om det inte direkt p√•verkar 6C-m√•tten,
                reducerar det teknisk skuld.
            </p>
            <p>
                <strong>F√∂rv√§ntad p√•verkan:</strong> Eftersom klassen inte har
                n√•gra tester kommer detta ocks√• att f√∂rb√§ttra testt√§ckningen.
                Maintainability index f√∂r denna klass var 68,04. Efter
                borttagningen f√∂rv√§ntar jag mig en f√∂rb√§ttrad kodkvalitet och
                minskad teknisk skuld.
            </p>
        </li>
        <li>
            <strong>√ñka testt√§ckningen f√∂r ApiController</strong>
            <p>
                <strong>Vad jag t√§nker g√∂ra:</strong> Jag ska skriva
                enhetstester f√∂r tre av de publika metoderna i
                <strong><code>ApiController</code></strong
                >.
            </p>
            <p>
                <strong>Varf√∂r jag v√§ljer detta:</strong> Att √∂ka testt√§ckningen
                kommer att f√∂rb√§ttra kodens tillf√∂rlitlighet och g√∂ra det
                enklare att underh√•lla och vidareutveckla koden.
            </p>
            <p>
                <strong>F√∂rv√§ntad p√•verkan:</strong> Fr√•n 0 % testt√§ckning f√∂r
                <strong><code>ApiController</code></strong> till en mer t√§ckt
                klass. Antalet violations minskade till 5 och antalet errors
                till 0. Dessutom √∂kade antalet assertions fr√•n 80 till 92.
            </p>
        </li>
    </ol>

    <h3>F√∂re och Efter J√§mf√∂relse</h3>
    <p><strong>F√∂re f√∂rb√§ttringar:</strong></p>
    <ul>
        <li>Totalt antal violations: 8</li>
        <li>Errors: 2</li>
        <li>
            Maintainability index f√∂r
            <strong><code>ProductController</code></strong
            >: 68,04
        </li>
        <li>
            Testt√§ckning f√∂r <strong><code>ApiController</code></strong
            >: 0 %
        </li>
        <li>Antal assertions: 80</li>
    </ul>

    <p><strong>Efter f√∂rb√§ttringar:</strong></p>
    <ul>
        <li>Totalt antal violations: 5</li>
        <li>Errors: 0</li>
        <li>
            <strong><code>ProductController</code></strong
            >: Borttagen
        </li>
        <li>
            Testt√§ckning f√∂r <strong><code>ApiController</code></strong
            >: √ñkad (3 metoder testade)
        </li>
        <li>Antal assertions: 92</li>
    </ul>

    <h2>Diskussion</h2>
    <p>
        Genom att anv√§nda den h√§r typen av verktyg s√• kan man absolut jobba med
        kodkvalitet. Kan g√• till √∂verdrift om det blir alltf√∂r m√•nga verktyg som
        ska k√∂ras, och dessutom om n√•gra finns lokalt (phpunit) och andra p√•
        internet (scrutinizer). Ett eller tv√• verktyg som dessutom g√§rna k√∂rs
        mer eller mindre automatiskt vore trevligt. Om jag hade f√•tt Scrutinizer
        att funka hade jag nog f√∂rdragit att k√∂ra med den utifr√•n vad jag
        testk√∂rt med ett annat git repository.
    </p>
    <p>
        En m√∂jlig nackdel kan vara att man fokuserar f√∂r mycket p√• att allt ska
        vara gr√∂nt. Tester ska s√•klart vara gr√∂na, men 100 % coverage beh√∂ver
        inte n√∂dv√§ndigtvis vara n√•got att str√§va efter, vilket dragits upp p√•
        f√∂rel√§sningen. Det finns v√§l risk att man skriver tester ‚Äúbara f√∂r att‚Äù.
        Inte f√∂r att de g√∂r n√•gon nytta. Kollar man p√• n√§tet och YouTube s√• √§r
        det m√•nga videos och artiklar om ‚ÄúStop Doing Clean Code‚Äù, d√§r jag tror
        man kanske g√•tt f√∂r l√•ngt och missf√∂rst√•tt vad det egentligen inneb√§r?
        En i kommentarerna sammanfattade det v√§ldigt bra tycker jag:
    </p>
    <blockquote>
        <p>
            ‚ÄúI think a code without bugs is not considered a 'clean code' and is
            more like 'a code without bugs'. Clean code refers more to
            formatting for better readability, docs, consistency in naming
            convention, low cyclomatic complexity, not have duplicate code
            blocks etc. A code that can be read after 8 months and is still
            understandable and its purpose is clear...that's a clean code.‚Äù
        </p>
    </blockquote>
    <p>
        S√• en viktig f√∂rdel, tror jag, med clean code √§r att om man kommer
        √∂verens om ett antal regler och verktyg att anv√§nda s√• blir det l√§ttare
        att l√§sa och √§ndra varandras kod, s√§rskilt n√§r man jobbar i projekt med
        andra. F√∂r egna privata projekt med ingen tanke p√• om framtida samarbete
        kan man visserligen g√∂ra lite som man vill. Men det h√§nder v√§l ibland
        att man inte kan l√§sa sin egen skrivstil? S√• det √§r nog nyttigt att
        f√∂rh√•lla sig till universiella principer √§nd√•.
    </p>
</div>

{% endblock %}
